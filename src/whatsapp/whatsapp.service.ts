import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Client, LocalAuth } from 'whatsapp-web.js';
import { NlpManager } from 'node-nlp';
import puppeteer from 'puppeteer';
import { HttpService } from '@nestjs/axios';
import { PendingConfirmation } from 'src/message/entities/message.entity';
import { v4 as uuidv4 } from 'uuid';
import { firstValueFrom } from 'rxjs';

@Injectable()
export class WhatsappService {
  private clients: Map<string, Client> = new Map();
  private nlpManager: NlpManager;
  private readonly logger = new Logger(WhatsappService.name);

  constructor(
    private readonly httpService: HttpService,
    @InjectRepository(PendingConfirmation)
    private readonly pendingConfirmationRepo: Repository<PendingConfirmation>,
  ) {
    this.nlpManager = new NlpManager({ languages: ['pt'] });
    this.trainNlp();
  }

  /**
   * Gera o QR Code **antes** de inicializar de fato a sess√£o.
   */
  async getQrCodeUrl(userId: string): Promise<string> {
    // Se j√° temos cliente autenticado, n√£o gera QR
    if (this.clients.has(userId)) {
      throw new Error('Sess√£o j√° aberta para este usu√°rio');
    }

    const dataPath = `./whatsapp-sessions/${userId}`;
    const client = new Client({
      puppeteer: {
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--single-process',
          '--disable-gpu',
        ],
        headless: true,
      },
      authStrategy: new LocalAuth({ dataPath }),
    });

    // Anexa listener de QR **antes** do initialize
    const qrPromise = new Promise<string>((resolve, reject) => {
      client.once('qr', qr => {
        const url = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qr)}&size=300x300`;
        resolve(url);
      });
      setTimeout(() => reject(new Error('Timeout ao gerar QR')), 30000);
    });

    // Anexa events b√°sicos
    client.on('ready', () => {
      this.logger.log(`[${userId}] Cliente pronto!`);
      this.clients.set(userId, client);
    });
    client.on('auth_failure', msg =>
      this.logger.error(`[${userId}] Falha na autentica√ß√£o: ${msg}`),
    );
    client.on('disconnected', reason => {
      this.logger.warn(`[${userId}] Desconectado: ${reason}`);
      this.clients.delete(userId);
    });
    client.on('message', msg => this.handleMessage(userId, msg));

    // Dispara a inicializa√ß√£o
    client.initialize();

    return qrPromise;
  }

  /**
   * Envia mensagem ‚Äî assume que a sess√£o j√° foi inicializada em getQrCodeUrl().
   */
  async sendMessage(
    userId: string,
    to: string,
    text: string,
    appointmentId: number,
  ) {
    const client = this.clients.get(userId);
    if (!client) {
      throw new Error('Sess√£o n√£o iniciada. Chame primeiro /message/connect');
    }

    const formattedTo = this.formatNumber(to);
    const pending = this.pendingConfirmationRepo.create({
      id: uuidv4(),
      appointmentId,
      phone: formattedTo,
    });
    await this.pendingConfirmationRepo.save(pending);

    try {
      return await client.sendMessage(formattedTo, text);
    } catch (error) {
      this.logger.error('Erro ao enviar mensagem:', error);
      if (error.message.includes('Session closed')) {
        this.logger.warn('Sess√£o fechada, removendo client e solicitando nova connect...');
        this.clients.delete(userId);
      }
      throw error;
    }
  }

  private async handleMessage(userId: string, message: any) {
    this.logger.log(`[${userId}] Mensagem recebida: ${message.body}`);
    const confirmation = await this.pendingConfirmationRepo.findOne({
      where: { phone: message.from },
    });
    if (!confirmation) return;

    const response = await this.nlpManager.process(
      'pt',
      this.normalizeText(message.body),
    );

    if (response.intent === 'confirmar' && response.score > 0.8) {
      await firstValueFrom(
        this.httpService.patch(
          `http://localhost:3001/appointment/${confirmation.appointmentId}`,
          { appointmentStatus: 'Confirmado' },
          { headers: { 'x-internal-api-secret': process.env.API_SECRET } },
        ),
      );
      await this.clients.get(userId).sendMessage(
        message.from,
        'Confirmei seu atendimento! üòÅ',
      );
      await this.pendingConfirmationRepo.delete({
        phone: message.from,
      });
    } else if (response.intent === 'cancelar' && response.score > 0.8) {
      await firstValueFrom(
        this.httpService.patch(
          `http://localhost:3001/appointment/${confirmation.appointmentId}`,
          {
            appointmentStatus: 'Cancelado',
            reasonLack: 'Cancelado pelo WhatsApp',
          },
          { headers: { 'x-internal-api-secret': process.env.API_SECRET } },
        ),
      );
      await this.clients.get(userId).sendMessage(
        message.from,
        'Cancelei seu atendimento! üòÅ',
      );
      await this.pendingConfirmationRepo.delete({
        phone: message.from,
      });
    } else {
      this.logger.log('Resposta n√£o clara. Nenhuma a√ß√£o tomada.');
    }
  }

  private normalizeText(text: string): string {
    return text
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .trim();
  }

  private async trainNlp() {
    const confirmExamples = [
      "sim", "confirmo", "est√° ok", "ok", "certo", "claro", "afirmativo",
      "estou de acordo", "com certeza", "acordo", "isso mesmo", "vou confirmar",
      "confirmar atendimento", "tudo certo", "concordo", "confirmado",
      "sim, pode confirmar", "por favor, confirme", "eu confirmo",
      "afirma sim", "com certeza, confirma", "sem duvidas, confirmo",
      "estou de acordo, pode prosseguir", "confirmado, prossiga", "quero", "desejo", "desejo confirmar"
    ];
    const cancelExamples = [
      "n√£o", "n√£o quero", "cancela", "cancelado", "impossivel", "recuso",
      "negativo", "n√£o concordo", "n√£o aceita", "n√£o posso confirmar",
      "n√£o desejo", "cancela atendimento", "deixa pra l√°", "nem pensar",
      "n√£o vou", "cancelar", "n√£o, cancele", "por favor, cancele",
      "n√£o quero confirmar", "cancelar o atendimento", "n√£o, obrigado",
      "n√£o, recuso", "n√£o, n√£o concordo", "cancelado, por favor interrompa", "pare, n√£o quero"
    ];

    confirmExamples.forEach(ex =>
      this.nlpManager.addDocument('pt', this.normalizeText(ex), 'confirmar'),
    );
    cancelExamples.forEach(ex =>
      this.nlpManager.addDocument('pt', this.normalizeText(ex), 'cancelar'),
    );
    this.nlpManager.addDocument('pt', 'n√£o entendi', 'fallback');
    this.nlpManager.addDocument('pt', 'pode repetir', 'fallback');

    this.logger.log('Treinando NLP...');
    await this.nlpManager.train();
    this.nlpManager.save();
    this.logger.log('NLP treinado.');
  }

  private formatNumber(number: string): string {
    return number.replace('+', '') + '@c.us';
  }
}
