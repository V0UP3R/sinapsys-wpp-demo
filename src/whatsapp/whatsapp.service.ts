import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Client, LocalAuth } from 'whatsapp-web.js';
import * as qrcode from 'qrcode-terminal';
import { NlpManager } from 'node-nlp';
import puppeteer from 'puppeteer';
@Injectable()
export class WhatsappService implements OnModuleInit {
  private client: Client;
  private nlpManager: NlpManager;
  // Chats que aguardam confirma√ß√£o
  private pendingConfirmations: Set<string> = new Set();
  private readonly logger = new Logger(WhatsappService.name);

  constructor() {
    // Inicializa o NLP Manager para o idioma portugu√™s
    this.nlpManager = new NlpManager({ languages: ['pt'] });
    this.trainNlp();
    // Inicializa o cliente do WhatsApp com autentica√ß√£o local
    this.initializeClient();
  }

  private async initializeClient() {
    const chrome = puppeteer.executablePath()
    const dataPath = '../whatsapp-session'

    this.client = new Client({
      puppeteer: {
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--single-process',
          '--no-sandbox',
          '--disable-gpu',
          '--remote-debugging-port=9222',
        ],
        headless: true,
      },
      authStrategy: new LocalAuth({dataPath}),
    });
  }

  async onModuleInit() {  
    this.client.on('qr', (qr) => {
      // qrcode.generate(qr, { small: true });
      const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(qr)}&size=300x300`;
      this.logger.log('Acesse o QR Code via o link:', qrCodeUrl);
    });
  
    this.client.on('ready', () => {
      this.logger.log('Cliente do WhatsApp pronto!');
    });

    this.client.on('auth_failure', (msg) => {
      this.logger.error('Falha na autentica√ß√£o:', msg);
    });
    
    this.client.on('disconnected', (reason) => {
      this.logger.warn('Cliente desconectado:', reason);
    });
  
    // Processa mensagens somente se o chat estiver aguardando confirma√ß√£o
    this.client.on('message', async (message) => {
      this.logger.log('Mensagem recebida:', message.body);
      
      if (!this.pendingConfirmations.has(message.from)) {
        return;
      }
      
      const normalizedText = this.normalizeText(message.body);
      const response = await this.nlpManager.process('pt', normalizedText);
  
      if (response.intent === 'confirmar' && response.score > 0.8) {
        await this.client.sendMessage(message.from, 'Confirmei seu atendimento te aguardamos ansiosos! üòÅ');
        this.pendingConfirmations.delete(message.from);
      } else if (response.intent === 'cancelar' && response.score > 0.8) {
        await this.client.sendMessage(message.from, 'Cancelei seu atendimento, caso tenha alguma d√∫vida basta entrar em contato conosco! üòÅ');
        this.pendingConfirmations.delete(message.from);
      } else {
        this.logger.log('Resposta n√£o foi suficientemente clara. Nenhuma a√ß√£o tomada.');
      }
    });
  
    this.client.initialize();
  }

  // Fun√ß√£o para normalizar o texto (exemplo simples)
  private normalizeText(text: string): string {
    return text
      .toLowerCase()
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .trim();
  }

  // Treinamento robusto do NLP com muitos exemplos para confirmar ou cancelar
  private async trainNlp() {
    // Exemplos para inten√ß√£o de confirma√ß√£o
    const confirmExamples = [
      "sim", "confirmo", "est√° ok", "ok", "certo", "claro", "afirmativo",
      "estou de acordo", "com certeza", "acordo", "isso mesmo", "vou confirmar",
      "confirmar atendimento", "tudo certo", "concordo", "confirmado",
      "sim, pode confirmar", "por favor, confirme", "eu confirmo",
      "afirma sim", "com certeza, confirma", "sem duvidas, confirmo",
      "estou de acordo, pode prosseguir", "confirmado, prossiga", "Quero", "Desejo", "Desejo confirmar"
    ];
    confirmExamples.forEach(example => {
      this.nlpManager.addDocument('pt', this.normalizeText(example), 'confirmar');
    });

    // Exemplos para inten√ß√£o de cancelamento
    const cancelExamples = [
      "n√£o", "n√£o quero", "cancela", "cancelado", "impossivel", "recuso",
      "negativo", "n√£o concordo", "n√£o aceita", "n√£o posso confirmar",
      "n√£o desejo", "cancela atendimento", "deixa pra la", "nem pensar",
      "n√£o vou", "cancelar", "n√£o, cancele", "por favor, cancele",
      "n√£o quero confirmar", "cancelar o atendimento", "n√£o, obrigado",
      "n√£o, recuso", "n√£o, n√£o concordo", "cancelado, por favor interrompa", "pare, n√£o quero"
    ];
    cancelExamples.forEach(example => {
      this.nlpManager.addDocument('pt', this.normalizeText(example), 'cancelar');
    });

    // Exemplos para fallback (opcional)
    this.nlpManager.addDocument('pt', 'n√£o entendi', 'fallback');
    this.nlpManager.addDocument('pt', 'pode repetir', 'fallback');

    this.logger.log('Treinando o modelo NLP...');
    await this.nlpManager.train();
    this.nlpManager.save();
    this.logger.log('Treinamento conclu√≠do.');
  }

  // Formata o n√∫mero para o padr√£o do WhatsApp
  formatNumber(number: string): string {
    return number.replace('+', '') + '@c.us';
  }
  
  // Envia uma mensagem via WhatsApp
  async sendMessage(to: string, message: string) {
    const formattedTo = this.formatNumber(to);
    this.pendingConfirmations.add(formattedTo);
    try {
      return await this.client.sendMessage(formattedTo, message);
    } catch (error) {
      this.logger.error('Erro ao enviar mensagem:', error);
      // Se o erro indicar que a sess√£o foi fechada, reinicialize o cliente
      if (error.message.includes('Session closed')) {
        this.logger.warn('Tentando reinicializar o cliente...');
        this.initializeClient();
        this.client.initialize();
      }
    }
  }

  // Envia uma solicita√ß√£o de confirma√ß√£o e registra o chat
  async requestConfirmation(to: string, message: string) {
    const formattedTo = this.formatNumber(to);
    await this.client.sendMessage(formattedTo, message);
    this.pendingConfirmations.add(formattedTo);
  }
}